 /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkgnew.shiva.krishna.jewellers;

import java.awt.Font;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.scene.paint.Color;
import javax.swing.ImageIcon;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

/**
 *
 * @author sarfraz
 */
public class Main extends javax.swing.JFrame {

    static float billAmt = 0;
    static float discAmt = 0;
    static float changeToGive = 0;
    static String custName = "";
    static String custId = "";
    DefaultTableModel model = new DefaultTableModel();
    public static DefaultTableModel recentModel;
    DefaultTableModel searchTableModel;
    DefaultTableModel duesTableModel;
    DefaultTableModel todaySaleModel;
    String todayDate = "";
    String searchedId = "";
    static int transGoing = 0;

    Thread todaySaleThread;
    
    
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        shopNameTv.setText(Constants.SHOP_NAME);
        shopAddressTv.setText(Constants.SHOP_ADDRESS);
        paidBtn.setEnabled(false);
        this.getContentPane().setBackground(java.awt.Color.decode("#0041C2"));
        ImageIcon iconn = createImageIcon(Constants.SHOP_LOGO_URL, "Java");
        iconSpace.setIcon(iconn);
        //display date
        displayDate();
        displayTodaySales();
        fillSearchTable();
        searchTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (searchTable.getSelectedRow() != -1) {
                    searchedId = searchTable.getValueAt(searchTable.getSelectedRow(), 0).toString();
                }
            }
        });
        /*SimpleDateFormat d = new SimpleDateFormat("dd/MM/yyyy HH:mm");
         System.out.println(DateCompare.getDateDaysAfter(d.format(Calendar.getInstance().getTime()), "2"));*/

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel7 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        shopNameTv = new javax.swing.JLabel();
        shopAddressTv = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        iconSpace = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        paidBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        givenMoneyTv = new javax.swing.JTextField();
        paymentCheckBox = new javax.swing.JCheckBox();
        duesPanel = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        paymentInDues = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        duesInterval = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        manageItemsButton = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        outOfStockTable = new javax.swing.JTable();
        dateText = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        notifTv = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        todaySaleTable = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        todaySaleTv = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        searchByCombo = new javax.swing.JComboBox();
        searchByLabel = new javax.swing.JLabel();
        searchBox = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchTable = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        addPurchaseInMenu = new javax.swing.JMenuItem();
        saleItemInMenu = new javax.swing.JMenuItem();
        exitInMenu = new javax.swing.JMenuItem();
        MenuTools = new javax.swing.JMenu();
        searchItem = new javax.swing.JMenuItem();
        ChangePassword = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        addUnit = new javax.swing.JMenuItem();
        addCategory = new javax.swing.JMenuItem();
        termsCond = new javax.swing.JMenuItem();
        MenuManage = new javax.swing.JMenu();
        manageItem = new javax.swing.JMenuItem();
        manageContractor = new javax.swing.JMenuItem();
        MenuReports = new javax.swing.JMenu();
        stockReport = new javax.swing.JMenuItem();
        saleReport = new javax.swing.JMenuItem();
        purchaseReport = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        MenuHelp = new javax.swing.JMenu();
        writeToUs = new javax.swing.JMenuItem();
        aboutUs = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Durga Krishna Jewellers");
        setBackground(new java.awt.Color(0, 153, 153));
        setBounds(new java.awt.Rectangle(200, 50, 800, 500));
        setForeground(new java.awt.Color(0, 153, 153));
        setLocation(new java.awt.Point(200, 0));
        setMinimumSize(new java.awt.Dimension(800, 500));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jPanel6.setBackground(new java.awt.Color(255, 102, 102));

        shopNameTv.setFont(new java.awt.Font("Times New Roman", 3, 60)); // NOI18N
        shopNameTv.setText("SHOP NAME HERE");

        shopAddressTv.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        shopAddressTv.setText("SHOP ADDRESS HERE");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Ph :  +91-9199228544");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("+91-9473428852");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(iconSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(shopAddressTv, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(480, 480, 480))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(shopNameTv, javax.swing.GroupLayout.PREFERRED_SIZE, 649, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addGap(121, 121, 121)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(92, 92, 92))))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(shopNameTv)
                        .addGap(23, 23, 23)
                        .addComponent(shopAddressTv)))
                .addContainerGap(40, Short.MAX_VALUE))
            .addComponent(iconSpace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Payment Section", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 3, 18))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        jLabel1.setText("Money Given");

        paidBtn.setBackground(new java.awt.Color(102, 153, 255));
        paidBtn.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        paidBtn.setText("Paid");
        paidBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                paidBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 2, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 204, 51));
        jLabel2.setText("Ready For Next Sale !!");

        givenMoneyTv.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        givenMoneyTv.setText("0");

        paymentCheckBox.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        paymentCheckBox.setText("Complete Payment");
        paymentCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                paymentCheckBoxItemStateChanged(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        jLabel7.setText("Amount to be paid now ");

        paymentInDues.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        jLabel9.setText("Expected time to pay rest amount");

        duesInterval.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 17)); // NOI18N
        jLabel10.setText("Days");

        javax.swing.GroupLayout duesPanelLayout = new javax.swing.GroupLayout(duesPanel);
        duesPanel.setLayout(duesPanelLayout);
        duesPanelLayout.setHorizontalGroup(
            duesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(duesPanelLayout.createSequentialGroup()
                .addGroup(duesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(duesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(duesPanelLayout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(paymentInDues, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(duesPanelLayout.createSequentialGroup()
                        .addComponent(duesInterval, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        duesPanelLayout.setVerticalGroup(
            duesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(duesPanelLayout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(duesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(paymentInDues, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(duesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(duesInterval, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(paymentCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(paidBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(givenMoneyTv, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(duesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(givenMoneyTv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(paymentCheckBox)
                    .addComponent(paidBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(duesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tasks", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 3, 18))); // NOI18N

        manageItemsButton.setBackground(new java.awt.Color(102, 153, 255));
        manageItemsButton.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        manageItemsButton.setText("Manage Items");
        manageItemsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageItemsButtonActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(102, 153, 255));
        jButton4.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jButton4.setText("Add Purchase");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(102, 153, 255));
        jButton5.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jButton5.setText("Sale Item");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(102, 153, 255));
        jButton6.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jButton6.setText("Search Item");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(102, 153, 255));
        jButton3.setFont(new java.awt.Font("Tahoma", 3, 24)); // NOI18N
        jButton3.setText("Orders");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(manageItemsButton, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(manageItemsButton)
                .addGap(26, 26, 26)
                .addComponent(jButton4)
                .addGap(28, 28, 28)
                .addComponent(jButton5)
                .addGap(26, 26, 26)
                .addComponent(jButton6)
                .addGap(28, 28, 28)
                .addComponent(jButton3)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Out Of Stock", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 3, 24), new java.awt.Color(255, 0, 0))); // NOI18N
        jPanel4.setForeground(new java.awt.Color(255, 0, 51));

        model = new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "S No.","Stock Id","Item Name"
            }
        );
        outOfStockTable.setModel(model);
        outOfStockTable.setFont(new Font("Tahoma",0,14));
        outOfStockTable.setRowHeight(40);
        if (outOfStockTable.getColumnModel().getColumnCount() > 0) {
            outOfStockTable.getColumnModel().getColumn(0).setMaxWidth(40);
            outOfStockTable.getColumnModel().getColumn(1).setMaxWidth(100);
        }
        jScrollPane2.setViewportView(outOfStockTable);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(117, 117, 117))
        );

        dateText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        dateText.setForeground(new java.awt.Color(255, 255, 255));
        dateText.setText("Date");

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Notification", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 3, 18))); // NOI18N

        notifTv.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        notifTv.setForeground(new java.awt.Color(255, 51, 51));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(notifTv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(notifTv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel5.setBackground(new java.awt.Color(153, 153, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Dues Alerts    (Dues Scheduled to be paid today)", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 3, 18))); // NOI18N

        duesTableModel = new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Dues", "Bill Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(duesTableModel);
        jTable1.setRowHeight(40);
        if(jTable1.getColumnModel().getColumnCount()>0){
            jTable1.getColumnModel().getColumn(0).setMaxWidth(500);
        }
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jPanel9.setBackground(new java.awt.Color(153, 153, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Today's Sale", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 3, 18))); // NOI18N

        todaySaleModel = new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id","Customer Name", "Bill Amount", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        todaySaleTable.setModel(todaySaleModel);
        todaySaleTable.setFont(new java.awt.Font("Tahoma", 0, 14));

        if (todaySaleTable.getColumnModel().getColumnCount() > 0) {
            todaySaleTable.getColumnModel().getColumn(0).setMaxWidth(200);
            todaySaleTable.getColumnModel().getColumn(3).setMaxWidth(250);

        }
        todaySaleTable.getTableHeader().setReorderingAllowed(false);
        todaySaleTable.setRowHeight(40);
        todaySaleTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                todaySaleTableMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                todaySaleTableMouseExited(evt);
            }
        });
        jScrollPane4.setViewportView(todaySaleTable);

        jLabel11.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel11.setText("Today's Total Earning : ");

        todaySaleTv.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        todaySaleTv.setForeground(new java.awt.Color(255, 51, 0));
        todaySaleTv.setText("Rs. ");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(todaySaleTv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(todaySaleTv))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Your Customer", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 3, 18))); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Find By :");

        searchByCombo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        searchByCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Customer Id" , "Customer Name", "Village / Address", "Mobile No." }));
        searchByCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                searchByComboItemStateChanged(evt);
            }
        });

        searchByLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        searchByLabel.setText("Enter Customer Id :");
        searchByLabel.setAlignmentX(5.0F);

        searchBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        searchBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchBoxKeyReleased(evt);
            }
        });

        searchTableModel = new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Customer Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        };
        searchTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        searchTable.setModel(searchTableModel);
        searchTable.setRowHeight(40);
        if (searchTable.getColumnModel().getColumnCount() > 0) {
            searchTable.getColumnModel().getColumn(0).setMaxWidth(200);

        }
        searchTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(searchTable);

        jButton2.setBackground(new java.awt.Color(102, 153, 255));
        jButton2.setText("Click to See Details");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(searchBox))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(searchByLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(searchByCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(searchByCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(searchByLabel)
                .addGap(18, 18, 18)
                .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Powered By : shopeasyweb.tk");

        jMenuBar1.setAlignmentX(5.0F);

        MenuFile.setText("File");
        MenuFile.setMargin(new java.awt.Insets(5, 10, 5, 10));

        addPurchaseInMenu.setText("Add Purchase (s)");
        addPurchaseInMenu.setMargin(new java.awt.Insets(5, 0, 5, 0));
        addPurchaseInMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPurchaseInMenuActionPerformed(evt);
            }
        });
        MenuFile.add(addPurchaseInMenu);

        saleItemInMenu.setText("Sale Item");
        saleItemInMenu.setMargin(new java.awt.Insets(5, 0, 5, 0));
        saleItemInMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saleItemInMenuActionPerformed(evt);
            }
        });
        MenuFile.add(saleItemInMenu);

        exitInMenu.setText("Exit");
        exitInMenu.setMargin(new java.awt.Insets(5, 0, 5, 0));
        exitInMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitInMenuActionPerformed(evt);
            }
        });
        MenuFile.add(exitInMenu);

        jMenuBar1.add(MenuFile);

        MenuTools.setText("Tools");
        MenuTools.setMargin(new java.awt.Insets(5, 10, 5, 10));

        searchItem.setText("Search Item");
        searchItem.setMargin(new java.awt.Insets(5, 0, 5, 0));
        searchItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchItemActionPerformed(evt);
            }
        });
        MenuTools.add(searchItem);

        ChangePassword.setText("Change Password");
        ChangePassword.setMargin(new java.awt.Insets(5, 0, 5, 0));
        ChangePassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ChangePasswordActionPerformed(evt);
            }
        });
        MenuTools.add(ChangePassword);

        jMenuItem2.setText("Change Auth Password");
        jMenuItem2.setMargin(new java.awt.Insets(5, 0, 5, 0));
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        MenuTools.add(jMenuItem2);

        addUnit.setText("Add Unit");
        addUnit.setMargin(new java.awt.Insets(5, 0, 5, 0));
        addUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUnitActionPerformed(evt);
            }
        });
        MenuTools.add(addUnit);

        addCategory.setText("Edit Preferences");
        addCategory.setMargin(new java.awt.Insets(5, 0, 5, 0));
        addCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoryActionPerformed(evt);
            }
        });
        MenuTools.add(addCategory);

        termsCond.setText("Edit Terms & Condn");
        termsCond.setMargin(new java.awt.Insets(5, 0, 5, 0));
        termsCond.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                termsCondActionPerformed(evt);
            }
        });
        MenuTools.add(termsCond);

        jMenuBar1.add(MenuTools);

        MenuManage.setText("Manage");
        MenuManage.setMargin(new java.awt.Insets(5, 10, 5, 10));

        manageItem.setText("Manage Item");
        manageItem.setMargin(new java.awt.Insets(5, 0, 5, 0));
        manageItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageItemActionPerformed(evt);
            }
        });
        MenuManage.add(manageItem);

        manageContractor.setText("Manage Contractor");
        manageContractor.setMargin(new java.awt.Insets(5, 0, 5, 0));
        manageContractor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageContractorActionPerformed(evt);
            }
        });
        MenuManage.add(manageContractor);

        jMenuBar1.add(MenuManage);

        MenuReports.setText("Reports");
        MenuReports.setMargin(new java.awt.Insets(5, 10, 5, 10));

        stockReport.setText("Stock Report");
        stockReport.setMargin(new java.awt.Insets(5, 0, 5, 0));
        stockReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stockReportActionPerformed(evt);
            }
        });
        MenuReports.add(stockReport);

        saleReport.setText("Sale Report");
        saleReport.setMargin(new java.awt.Insets(5, 0, 5, 0));
        saleReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saleReportActionPerformed(evt);
            }
        });
        MenuReports.add(saleReport);

        purchaseReport.setText("Purchase Report");
        purchaseReport.setMargin(new java.awt.Insets(5, 0, 5, 0));
        purchaseReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseReportActionPerformed(evt);
            }
        });
        MenuReports.add(purchaseReport);

        jMenuItem3.setText("See All Dues");
        jMenuItem3.setMargin(new java.awt.Insets(5, 0, 5, 0));
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        MenuReports.add(jMenuItem3);

        jMenuItem4.setText("Exchanged Old Metals");
        jMenuItem4.setMargin(new java.awt.Insets(5, 0, 5, 0));
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        MenuReports.add(jMenuItem4);

        jMenuItem5.setText("See Orders");
        jMenuItem5.setMargin(new java.awt.Insets(5, 0, 5, 0));
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        MenuReports.add(jMenuItem5);

        jMenuBar1.add(MenuReports);

        MenuHelp.setText("Help");
        MenuHelp.setMargin(new java.awt.Insets(5, 10, 5, 10));

        writeToUs.setText("Write To Us");
        writeToUs.setMargin(new java.awt.Insets(5, 0, 5, 0));
        writeToUs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                writeToUsActionPerformed(evt);
            }
        });
        MenuHelp.add(writeToUs);

        aboutUs.setText("About Us");
        aboutUs.setMargin(new java.awt.Insets(5, 0, 5, 0));
        aboutUs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutUsActionPerformed(evt);
            }
        });
        MenuHelp.add(aboutUs);

        jMenuBar1.add(MenuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addPurchaseInMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPurchaseInMenuActionPerformed
        AddPurchase ap = new AddPurchase();
    }//GEN-LAST:event_addPurchaseInMenuActionPerformed

    private void saleItemInMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saleItemInMenuActionPerformed
        SaleItem si = new SaleItem();
    }//GEN-LAST:event_saleItemInMenuActionPerformed

    private void paidBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_paidBtnActionPerformed
        if (transGoing == 1) {
            if (paymentCheckBox.isSelected()) {
                if (billAmt == 0) {
                    AlertMessage msg = new AlertMessage("<html>No customer dealts at this moment..<br>Will work after printing the bill !!</html>");
                } else {
                    float gotAmt = Float.parseFloat(givenMoneyTv.getText());
                    changeToGive = gotAmt - billAmt + discAmt;
                    if (changeToGive > 0) {
                        notifTv.setText("<html>Amount to return : <br>      " + changeToGive + "</html>");
                        updateHistory(billAmt - discAmt, "paid", custId);
                    } else {
                        notifTv.setText("<html>Amount to return : <br>      0.00</html>");
                        updateHistory(Float.parseFloat(givenMoneyTv.getText()), "paid", custId);
                    }

                    givenMoneyTv.setText("");
                    transGoing=0;
                }
            } else {
                if (billAmt == 0) {
                    AlertMessage msg = new AlertMessage("<html>No customer dealts at this moment..<br>Will work after printing the bill !!</html>");
                } else {
                    String amtPaidNow = paymentInDues.getText();
                    String daysAfter = duesInterval.getText();

                    if (!Helper.priceFormatCheck(amtPaidNow)) {
                        AlertMessage msg = new AlertMessage("Amount to be paid is not acceptable format");
                    } else if (amtPaidNow.equals("")) {
                        AlertMessage msg = new AlertMessage("Please specify amount to be paid");
                    } else if (daysAfter.equals("")) {
                        AlertMessage msg = new AlertMessage("Please specify the expected day");
                    } else if (givenMoneyTv.getText().equals("")) {
                        AlertMessage msg = new AlertMessage("Please specify the given money");
                    } else if (!Helper.priceFormatCheck(givenMoneyTv.getText())) {
                        AlertMessage msg = new AlertMessage("Received money format is not acceptable");
                    } else if (!Helper.isInt(daysAfter)) {
                        AlertMessage msg = new AlertMessage("No. of days should be an integer..");
                    } else {
                        float amt = Float.parseFloat(amtPaidNow);
                        float days = Integer.parseInt(daysAfter);
                        float gotAmt = Float.parseFloat(givenMoneyTv.getText());
                        if (amt > gotAmt) {
                            AlertMessage msg = new AlertMessage("Amount to be paid now is greater than received amount");
                        } else {
                            changeToGive = gotAmt - amt;
                            notifTv.setText("<html>Amount to return : <br>      " + changeToGive + "</html>");
                            float dues = billAmt - discAmt - amt;
                            writeOnDuesFile(custId, custName, dues, days);
                            updateHistory(amt, "paid", custId);
                            givenMoneyTv.setText("");
                            paymentInDues.setText("");
                            duesInterval.setText("");
                            transGoing = 0;
                        }
                    }
                }

            }
        } else {
            AlertMessage msg = new AlertMessage("<html>No customer dealts at this moment..<br>Will work after printing the bill !!</html>");
        }
    }//GEN-LAST:event_paidBtnActionPerformed

    public static void updateHistory(float amt, String action, String cid) {
        JSONArray mainArray = JsonClass.getJsonArray(Constants.TRANS_HISTORY_FILE);
        JSONArray newMainArray = new JSONArray();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");

        for (int i = 0; i < mainArray.size(); i++) {
            JSONArray array = (JSONArray) mainArray.get(i);
            JSONObject obj = (JSONObject) array.get(0);
            String id = obj.get("customerId").toString();
            if (id.equals(cid)) {
                JSONObject object = new JSONObject();
                object.put("activity", action);
                object.put("amount", amt);
                object.put("transDate", sdf.format(Calendar.getInstance().getTime()));
                array.add(object);
                newMainArray.add(array);
            } else {
                newMainArray.add(array);
            }
        }
        FileWriter.write(Constants.TRANS_HISTORY_FILE, newMainArray.toString());
    }

    public static void writeOnDuesFile(String custID, String custNAME, float dues, float days) {
        
        SimpleDateFormat y = new SimpleDateFormat("dd/MM/yyyy     hh:mm:ss a");
        Date date = Calendar.getInstance().getTime();
        String td = y.format(date);
        if(dues <= 0){
            AlertMessage msg = new AlertMessage("No dues... You need to pay "+Math.abs(dues)+ " more..!!");
            return;
        }
        JSONArray array = JsonClass.getJsonArray(Constants.DUES_FILE);
        JSONObject obj = new JSONObject();
        obj.put("customerId", custID);
        obj.put("customerName", custNAME);
        obj.put("dues", String.format("%.2f", dues));
        obj.put("billDate", td);
        obj.put("days", days);

        array.add(obj);
        FileWriter.write(Constants.DUES_FILE, array.toJSONString());
    }

    private void manageItemsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageItemsButtonActionPerformed
        ManageItems item = new ManageItems();
    }//GEN-LAST:event_manageItemsButtonActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        AddPurchase p = new AddPurchase();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        SaleItem s = new SaleItem();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        SearchSale search = new SearchSale();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void addUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUnitActionPerformed
        AddUnit add = new AddUnit();
    }//GEN-LAST:event_addUnitActionPerformed

    private void manageContractorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageContractorActionPerformed
        ContractorManagement cm = new ContractorManagement();
    }//GEN-LAST:event_manageContractorActionPerformed

    private void manageItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageItemActionPerformed
        ManageItems mi = new ManageItems();
    }//GEN-LAST:event_manageItemActionPerformed

    private void searchItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchItemActionPerformed
        SearchSale si = new SearchSale();
    }//GEN-LAST:event_searchItemActionPerformed

    private void termsCondActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_termsCondActionPerformed
        TermsAndConditions tc = new TermsAndConditions();
    }//GEN-LAST:event_termsCondActionPerformed

    private void exitInMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitInMenuActionPerformed
        dispose();
        System.exit(1);
    }//GEN-LAST:event_exitInMenuActionPerformed

    private void ChangePasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ChangePasswordActionPerformed
        PasswordChange c = new PasswordChange();
    }//GEN-LAST:event_ChangePasswordActionPerformed

    private void writeToUsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_writeToUsActionPerformed
        WriteToUs wtu = new WriteToUs();
    }//GEN-LAST:event_writeToUsActionPerformed

    private void stockReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stockReportActionPerformed
        StockReport sr = new StockReport();
    }//GEN-LAST:event_stockReportActionPerformed

    private void saleReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saleReportActionPerformed
        SaleReport sr = new SaleReport();
    }//GEN-LAST:event_saleReportActionPerformed

    private void purchaseReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseReportActionPerformed
        purchaseReport pr = new purchaseReport();
    }//GEN-LAST:event_purchaseReportActionPerformed

    private void addCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategoryActionPerformed
        BillPreferences bf = new BillPreferences();
    }//GEN-LAST:event_addCategoryActionPerformed

    private void aboutUsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutUsActionPerformed
        AboutUs au = new AboutUs();
    }//GEN-LAST:event_aboutUsActionPerformed

    private void paymentCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_paymentCheckBoxItemStateChanged
        if (!paymentCheckBox.isSelected()) {
            duesPanel.setVisible(true);
        } else {
            duesPanel.setVisible(false);
        }
    }//GEN-LAST:event_paymentCheckBoxItemStateChanged

    private void searchByComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_searchByComboItemStateChanged
        int t = searchByCombo.getSelectedIndex();
        if (t == 0) {
            searchByLabel.setText("Enter Customer Id :");
        } else if(t==1 ){
            searchByLabel.setText("Enter Customer Name :");
        }else if(t==2){
            searchByLabel.setText("Enter Village / Address :");
        }else if(t==3){
            searchByLabel.setText("Enter Customer Mobile No.  :");
        }
    }//GEN-LAST:event_searchByComboItemStateChanged

    private void searchBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBoxKeyReleased
        searchTableModel.setNumRows(0);
        String keyword = searchBox.getText();
        searchTable.setFont(new java.awt.Font("Tahoma", 0, 14));
        searchTable.setForeground(new java.awt.Color(0, 0, 0));
        int t = searchByCombo.getSelectedIndex();
        if (t == 0) {
            updateSearchTableById(keyword);
        } else if(t==1){
            updateSearchTableByName(keyword);
        }else if(t==2){
            updateSearchTableByVillage(keyword);
        }else if(t==3){
            updateSearchTableByPhone(keyword);
        }
        if (searchTableModel.getRowCount() == 0) {
            searchTableModel.addRow(new Object[]{"", "No match found"});
            Font f = new Font("Tahoma", Font.BOLD, 18);
            searchTable.setFont(f);
            searchTable.setForeground(new java.awt.Color(255, 102, 153));
        }

    }//GEN-LAST:event_searchBoxKeyReleased

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        AllDues ad = new AllDues();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (searchTable.getSelectedRow() != -1) {
            CustomerHistory ch = new CustomerHistory(searchTable.getValueAt(searchTable.getSelectedRow(), 0).toString());
        } else {
            AlertMessage msg = new AlertMessage("Please select the customer to see the details");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void todaySaleTableMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_todaySaleTableMouseEntered
       
        
    }//GEN-LAST:event_todaySaleTableMouseEntered

    private void todaySaleTableMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_todaySaleTableMouseExited
        
    }//GEN-LAST:event_todaySaleTableMouseExited

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
       AuthPasswordChange apc = new AuthPasswordChange();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        ExchangedOldMetals eom = new ExchangedOldMetals();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        OrderForm of = new OrderForm();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        Orders o = new Orders();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    public void updateSearchTableById(String s) {
        JSONArray array = JsonClass.getJsonArray(Constants.SALE_RECORD_FILE);
        JSONParser parser = new JSONParser();
        Object o;
        for (int i = array.size() - 1; i >= 0; i--) {
            try {
                o = parser.parse(array.get(i).toString());
                JSONArray arr = (JSONArray) o;

                o = parser.parse(arr.get(0).toString());
                JSONObject jobj = (JSONObject) o;
                String custId = jobj.get("customerID").toString();
                String custName = jobj.get("customerName").toString();
                if (custId.toLowerCase().trim().startsWith(s.toLowerCase().trim())) {
                    searchTableModel.addRow(new Object[]{custId, custName});
                }
            } catch (ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void updateSearchTableByName(String s) {
        JSONArray array = JsonClass.getJsonArray(Constants.SALE_RECORD_FILE);
        JSONParser parser = new JSONParser();
        Object o;
        for (int i = array.size() - 1; i >= 0; i--) {
            try {
                o = parser.parse(array.get(i).toString());
                JSONArray arr = (JSONArray) o;

                o = parser.parse(arr.get(0).toString());
                JSONObject jobj = (JSONObject) o;
                String custId = jobj.get("customerID").toString();
                String custName = jobj.get("customerName").toString();
                if (custName.toLowerCase().trim().startsWith(s.toLowerCase().trim())) {
                    searchTableModel.addRow(new Object[]{custId, custName});
                }
            } catch (ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void updateSearchTableByVillage(String s) {
        JSONArray array = JsonClass.getJsonArray(Constants.SALE_RECORD_FILE);
        JSONParser parser = new JSONParser();
        Object o;
        for (int i = array.size() - 1; i >= 0; i--) {
            try {
                o = parser.parse(array.get(i).toString());
                JSONArray arr = (JSONArray) o;

                o = parser.parse(arr.get(0).toString());
                JSONObject jobj = (JSONObject) o;
                String custId = jobj.get("customerID").toString();
                String custName = jobj.get("customerName").toString();
                String addr = jobj.get("customerAddress").toString();
                
                
                if (addr.toLowerCase().trim().contains(s.toLowerCase().trim())) {
                    searchTableModel.addRow(new Object[]{custId, custName});
                }
            } catch (ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    public void updateSearchTableByPhone(String s) {
        JSONArray array = JsonClass.getJsonArray(Constants.SALE_RECORD_FILE);
        JSONParser parser = new JSONParser();
        Object o;
        for (int i = array.size() - 1; i >= 0; i--) {
            try {
                o = parser.parse(array.get(i).toString());
                JSONArray arr = (JSONArray) o;

                o = parser.parse(arr.get(0).toString());
                JSONObject jobj = (JSONObject) o;
                String custId = jobj.get("customerID").toString();
                String custName = jobj.get("customerName").toString();
                String phone = jobj.get("customerPhone").toString();
                if (phone.toLowerCase().trim().startsWith(s.toLowerCase().trim())) {
                    searchTableModel.addRow(new Object[]{custId, custName});
                }
            } catch (ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public void fillSearchTable() {
        String custId = "";
        JSONArray array = JsonClass.getJsonArray(Constants.SALE_RECORD_FILE);
        JSONParser parser = new JSONParser();
        Object o;
        for (int i = array.size() - 1; i >= 0; i--) {
            try {
                o = parser.parse(array.get(i).toString());
                JSONArray arr = (JSONArray) o;

                o = parser.parse(arr.get(0).toString());
                JSONObject jobj = (JSONObject) o;
                if (jobj.get("customerID") != null) {
                    custId = jobj.get("customerID").toString();
                }

                String custName = jobj.get("customerName").toString();

                searchTableModel.addRow(new Object[]{custId, custName});

            } catch (ParseException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }

    // 1 sec interval runnable
    public void displayDate() {
        Runnable runnable = new Runnable() {

            @Override
            public void run() {
                while (true) {
                    SimpleDateFormat y = new SimpleDateFormat("dd/MM/yyyy     hh:mm:ss a");
                    Date date = Calendar.getInstance().getTime();
                    todayDate = y.format(date);
                    dateText.setText("Date: " + todayDate);
                    
                   

                    displayTodayEarning();

                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }
        };

        Thread t = new Thread(runnable);
        t.start();
    }

    //5sec interval runnable
    public void displayTodaySales() {

        Runnable runnable = new Runnable() {

            @Override
            public void run() {
                while (true) {
                    displayOutOfStock();
                    displayAlertsForDues();
                    todaySaleModel.setNumRows(0);

                    JSONArray mainArray = JsonClass.getJsonArray(Constants.SALE_RECORD_FILE);

                    for (int i = 0; i < mainArray.size(); i++) {
                        JSONArray array = (JSONArray) mainArray.get(i);

                        JSONObject obj = (JSONObject) array.get(0);
                        String date = obj.get("billDate").toString();

                        if (DateCompare.isToday(date)) {

                            String name = obj.get("customerName").toString();
                            String amount = obj.get("totalAmount").toString();
                            String discount = obj.get("discount").toString();
                            String id = obj.get("customerID").toString();
                            String status = "Paid";

                            JSONArray duesArray = JsonClass.getJsonArray(Constants.DUES_FILE);
                            for (int j = 0; j < duesArray.size(); j++) {
                                JSONObject o = (JSONObject) duesArray.get(j);
                                String did = o.get("customerId").toString();
                                if (did.equals(id)) {
                                    status = "Dues";
                                    break;
                                }
                            }
                            float mCost=0;
                            JSONArray oldMetalArray = JsonClass.getJsonArray(Constants.OLD_METAL_FILE);
                            for(int j=oldMetalArray.size()-1; j>=0;j--){
                                JSONObject o = (JSONObject) oldMetalArray.get(j);
                                String did = o.get("customerId").toString();
                                if(did.equals(id)){
                                    mCost = Float.parseFloat(o.get("totalCost").toString());
                                }
                                        
                            }
                            //float amt = Float.parseFloat(amount)*() - Float.parseFloat(discount);
                            todaySaleModel.addRow(new Object[]{id, name, Float.parseFloat(amount) - Float.parseFloat(discount) - mCost, status});
                        }
                    }
                    
                    try {
                        Thread.sleep(5000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        };
        todaySaleThread = new Thread(runnable);
        todaySaleThread.setName("todaySale");
        todaySaleThread.start();

    }

    public void displayTodayEarning() {
        float t = 0;
        JSONArray mainArray = JsonClass.getJsonArray(Constants.TRANS_HISTORY_FILE);
        for (int i = 0; i < mainArray.size(); i++) {
            JSONArray array = (JSONArray) mainArray.get(i);
            for (int j = 1; j < array.size(); j++) {
                JSONObject obj = (JSONObject) array.get(j);
                if (DateCompare.isToday(obj.get("transDate").toString())) {
                    t += Float.parseFloat(obj.get("amount").toString());
                }
            }
        }
        todaySaleTv.setText("Rs. " + t);
    }

    public void displayOutOfStock() {
        model.setNumRows(0);
        int id = 0;
        JSONArray array = JsonClass.getJsonArray(Constants.STOCK_FILE);
        JSONParser parser = new JSONParser();
        try {
            for (int i = 0; i < array.size(); i++) {
                Object o = parser.parse(array.get(i).toString());
                JSONObject obj = (JSONObject) o;
                float rem = Float.parseFloat(obj.get("remainingPieces").toString());
                if (rem <= 0) {
                    model.addRow(new Object[]{++id, obj.get("id"), obj.get("name")});
                }

            }
        } catch (ParseException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void displayAlertsForDues() {
        duesTableModel.setNumRows(0);
        JSONArray array = JsonClass.getJsonArray(Constants.DUES_FILE);
        JSONParser parser = new JSONParser();
        for (int i = 0; i < array.size(); i++) {
            JSONObject obj = (JSONObject) array.get(i);
            String dues = obj.get("dues").toString();
            String cId = obj.get("customerId").toString();
            String days = obj.get("days").toString();
            String billDate = obj.get("billDate").toString();
            String cName = obj.get("customerName").toString();

            Date targetDate = DateCompare.getDateDaysAfter(billDate, days);
            if (DateCompare.isDatePassed(targetDate)) {
                showAlert(cId, cName, dues, billDate);
            }

        }
    }

    public void showAlert(String id, String name, String dues, String billDate) {
        duesTableModel.addRow(new Object[]{id, name, dues, billDate});
    }

    public static void setBillAmt(float amt, float adv, float disc) {
        billAmt = amt;
        discAmt = disc;
        String text = "";
        float a = amt;
        text += "<html>Total bill amount - " + amt + "<br><br>";
        if (discAmt > 0) {
            text += "Discount provided - " + discAmt + "<br>";
            a -= disc;
        }
        if(adv > 0 ){
            text += "Advance Paid Earlier - " + adv + "<br>"; //+ "<br><br>Amount to pay :<br>      " + (amt - discAmt) + "</html>";
            a -= adv;
        }
        
            text += "Amount to pay :<br>      " + a + "</html>";
        
        notifTv.setText(text);
        transGoing = 1;

    }

    public static void setCustDetails(String name, String id) {
        custName = name;
        custId = id;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem ChangePassword;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JMenu MenuHelp;
    private javax.swing.JMenu MenuManage;
    private javax.swing.JMenu MenuReports;
    private javax.swing.JMenu MenuTools;
    private javax.swing.JMenuItem aboutUs;
    private javax.swing.JMenuItem addCategory;
    private javax.swing.JMenuItem addPurchaseInMenu;
    private javax.swing.JMenuItem addUnit;
    private javax.swing.JLabel dateText;
    private javax.swing.JTextField duesInterval;
    private javax.swing.JPanel duesPanel;
    private javax.swing.JMenuItem exitInMenu;
    private javax.swing.JTextField givenMoneyTv;
    private javax.swing.JLabel iconSpace;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JMenuItem manageContractor;
    private javax.swing.JMenuItem manageItem;
    private javax.swing.JButton manageItemsButton;
    public static javax.swing.JLabel notifTv;
    private javax.swing.JTable outOfStockTable;
    private javax.swing.JButton paidBtn;
    private javax.swing.JCheckBox paymentCheckBox;
    private javax.swing.JTextField paymentInDues;
    private javax.swing.JMenuItem purchaseReport;
    private javax.swing.JMenuItem saleItemInMenu;
    private javax.swing.JMenuItem saleReport;
    private javax.swing.JTextField searchBox;
    private javax.swing.JComboBox searchByCombo;
    private javax.swing.JLabel searchByLabel;
    private javax.swing.JMenuItem searchItem;
    private javax.swing.JTable searchTable;
    private javax.swing.JLabel shopAddressTv;
    private javax.swing.JLabel shopNameTv;
    private javax.swing.JMenuItem stockReport;
    private javax.swing.JMenuItem termsCond;
    private javax.swing.JTable todaySaleTable;
    private javax.swing.JLabel todaySaleTv;
    private javax.swing.JMenuItem writeToUs;
    // End of variables declaration//GEN-END:variables

    private static ImageIcon createImageIcon(String path,
            String description) {
        java.net.URL imgURL = Main.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL, description);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }
}
/*
 new javax.swing.table.DefaultTableModel(
 new Object [][] {
 {},
 {},
 {},
 {}
 },
 new String [] {

 }
 )
 */
